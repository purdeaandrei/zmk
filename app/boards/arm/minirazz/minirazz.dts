/*
 * Copyright (c) 2021-2023 Yonatan Schachter, Andrei Purdea
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/dts-v1/;

#include <rpi_pico/rp2040.dtsi>
#include <freq.h>
#include <dt-bindings/pinctrl/rpi-pico-rp2040-pinctrl.h>
#include <dt-bindings/zmk/matrix_transform.h>

&pinctrl {
	spi1_default: spi1_default {
		group1 {
			pinmux = <SPI1_SCK_P26>;
		};
		group2 {
			pinmux = <SPI1_RX_P24>;
			input-enable;
		};
	};
};

/ {
	led_indicators {
		compatible = "gpio-leds";
		label = "LED indicators";

		led_numlock: led_numlock {
			gpios = <&gpio0 22 GPIO_ACTIVE_LOW>;
				label = "Num lock LED";
		};
		led_capslock: led_capslock {
			gpios = <&gpio0 21 GPIO_ACTIVE_LOW>;
				label = "Caps lock LED";
		};
		led_scrolllock: led_scrolllock {
			gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
				label = "Scroll lock LED";
		};
	};
	chosen {
		zephyr,sram = &sram0;
		zephyr,flash = &flash0;
		zephyr,console = &cdc_acm_uart;
		zephyr,code-partition = &code_partition;
		zmk,kscan = &kscan1;
		zmk,matrix_transform = &default_transform;
		zmk,led-capslock = &led_capslock;
		zmk,led-numlock = &led_numlock;
		zmk,led-scrolllock = &led_scrolllock;
	};
	xtal_clk: xtal-clk {
		compatible = "fixed-clock";
		clock-frequency = <12000000>;
		#clock-cells = <0>;
	};
	default_transform: keymap_transform_0 {
		compatible = "zmk,matrix-transform";
		columns = <16>;
		rows = <12>;
		map = <
RC(0,1)      RC(2,2) RC(0,4) RC(0,5) RC(0,6)      RC(1,8) RC(3,8) RC(4,8) RC(5,8)      RC(6,8) RC(6,10) RC(6,11) RC(7,11)       RC(6,13)  RC(7,13)  RC(11,15)

RC(0,0) RC(3,2) RC(6,2) RC(7,2) RC(4,2) RC(0,2) RC(1,7) RC(5,7) RC(10,7) RC(9,7) RC(8,7) RC(6,12) RC(6,9) RC(7,12) RC(8,9)      RC(8,12)  RC(9,13)  RC(10,12)
RC(2,12)   RC(1,2) RC(5,2) RC(10,2) RC(9,2) RC(8,2) RC(3,7) RC(6,7) RC(7,7) RC(4,7) RC(0,7) RC(5,9) RC(10,9) RC(9,9)            RC(11,13) RC(8,11)  RC(10,13)
RC(1,0)      RC(2,11) RC(2,0) RC(2,1) RC(2,3) RC(2,4) RC(11,5) RC(11,8) RC(11,6) RC(11,9) RC(11,10) RC(11,12) RC(1,13) RC(0,13)
RC(4,15) RC(1,1) RC(2,5) RC(2,8) RC(2,6) RC(2,9) RC(2,10) RC(11,11) RC(11,0) RC(11,1) RC(11,3) RC(11,4) RC(0,3) RC(1,15)                  RC(8,10)
RC(4,14) RC(3,11) RC(0,12)                             RC(10,0)                         RC(9,3) RC(5,10) RC(10,4) RC(1,14)      RC(9,4)   RC(10,11) RC(10,10)
		>;
	};
	kscan1: kscan_deghost1 {
		compatible = "zmk,kscan-deghost";
		kscan = <&kscan0>;
		transform = <&default_transform>;
	};
	kscan0: kscan {
		compatible = "zmk,kscan-gpio-matrix";
		diode-direction = "row2col";
		poll-period-ms = <1>;
		row-gpios
			= <&gpio0  8 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			, <&gpio0  9 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			, <&gpio0 10 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			, <&gpio0 11 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			, <&gpio0 12 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			, <&gpio0 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			, <&gpio0 14 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			, <&gpio0 15 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			, <&gpio0 16 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			, <&gpio0 17 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			, <&gpio0 18 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			, <&gpio0 19 (GPIO_ACTIVE_LOW | GPIO_PULL_UP | GPIO_OPEN_DRAIN)>
			;
		col-gpios
			= <&shifter 7 GPIO_ACTIVE_LOW>
			, <&shifter 6 GPIO_ACTIVE_LOW>
			, <&shifter 5 GPIO_ACTIVE_LOW>
			, <&shifter 4 GPIO_ACTIVE_LOW>
			, <&shifter 3 GPIO_ACTIVE_LOW>
			, <&shifter 2 GPIO_ACTIVE_LOW>
			, <&shifter 1 GPIO_ACTIVE_LOW>
			, <&shifter 0 GPIO_ACTIVE_LOW>
			, <&gpio0  7 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
			, <&gpio0  6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
			, <&gpio0  5 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
			, <&gpio0  4 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
			, <&gpio0  3 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
			, <&gpio0  2 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
			, <&gpio0  1 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
			, <&gpio0  0 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
			;
	};
};

&flash0 {
	/* 16MB of flash minus the 0x100 used for
	 * the second stage bootloader
	 */
	reg = <0x10000000 DT_SIZE_M(16)>;

	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		/* Reserved memory for the second stage bootloader */
		second_stage_bootloader: partition@0 {
			label = "second_stage_bootloader";
			reg = <0x00000000 0x100>;
			read-only;
		};


		/*
		 * Usable flash. Starts at 0x100, after the bootloader. The partition
		 * size is 16MB minus the 0x100 bytes taken by the bootloader.
		 */
		code_partition: partition@100 {
			label = "code-partition";
			reg = <0x100 (DT_SIZE_M(16) - 0x100)>;
			read-only;
		};
	};
};

&spi1 {
	status = "okay";
	pinctrl-0 = <&spi1_default>;
	pinctrl-names = "default";
	clock-frequency = <DT_FREQ_M(5)>;
	cs-gpios = <&gpio0 27 (GPIO_ACTIVE_HIGH)>;
	shifter: 165@0 {
		compatible = "zmk,gpio-165";
		status = "okay";
		gpio-controller;
		#gpio-cells = <2>;
		ngpios = <8>;
		label = "74HC165";
		reg = <0>;
		spi-max-frequency = <5000000>;
		//load-gpios = <&gpio0  27 (GPIO_ACTIVE_HIGH)>;
	};
};

&gpio0 {
	status = "okay";
};

zephyr_udc0: &usbd {
	status = "okay";
	cdc_acm_uart: cdc_acm_uart {
		compatible = "zephyr,cdc-acm-uart";
		label = "CDC_ACM_0";
	};
};
